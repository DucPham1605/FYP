{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isLoggedIn } from './handleCookie';\nexport const listJournals = (skip, limit) => {\n  //skip and limit are sent from client side\n  const data = {\n    skip,\n    limit\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const createJournal = (journal, token) => {\n  let endPoint;\n\n  if (isLoggedIn() && isLoggedIn().role === \"admin\") {\n    endPoint = `${API}/journal`;\n  } else if (isLoggedIn() && isLoggedIn().role === \"member\") {\n    endPoint = `${API}/member/journal`;\n  }\n\n  return fetch(`${endPoint}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: journal\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const readJournal = slug => {\n  return fetch(`${API}/journal/${slug}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const listRelatedJournal = journal => {\n  //skip and limit are sent from client side\n  return fetch(`${API}/journals/relatedJournal`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(journal)\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const deleteJournal = (slug, token) => {\n  let endPoint;\n\n  if (isLoggedIn() && isLoggedIn().role === \"admin\") {\n    endPoint = `${API}/journal/${slug}`;\n  } else if (isLoggedIn() && isLoggedIn().role === \"member\") {\n    endPoint = `${API}/member/journal/${slug}`;\n  }\n\n  return fetch(endPoint, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const updateJournal = (journal, token, slug) => {\n  let endPoint;\n\n  if (isLoggedIn() && isLoggedIn().role === \"admin\") {\n    endPoint = `${API}/journal/${slug}`;\n  } else if (isLoggedIn() && isLoggedIn().role === \"member\") {\n    endPoint = `${API}/member/journal/${slug}`;\n  }\n\n  return fetch(`${API}/journal/${slug}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: journal\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n}; //send params from frontend\n\nexport const listSearch = params => {\n  console.log('search params', params); //assumption: params is an object\n\n  let query = queryString.stringify(params);\n  console.log('query params', query); //query = object stringified \n\n  return fetch(`${API}/journals/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const listJournalForManage = username => {\n  /* `${API}/${username}/journals`*/\n  return fetch(`${API}/journals`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};","map":{"version":3,"sources":["D:/journalProject/frontend/actions/journal.js"],"names":["fetch","API","queryString","isLoggedIn","listJournals","skip","limit","data","method","headers","Accept","body","JSON","stringify","then","response","json","catch","error","console","log","createJournal","journal","token","endPoint","role","Authorization","readJournal","slug","listRelatedJournal","deleteJournal","updateJournal","listSearch","params","query","listJournalForManage","username"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\r\nimport { API } from '../config';\r\nimport queryString from 'query-string'\r\nimport {isLoggedIn} from './handleCookie'\r\n\r\nexport const listJournals = (skip,limit) => {\r\n    //skip and limit are sent from client side\r\n    const data = {\r\n        skip,\r\n        limit\r\n    }\r\n\r\n    return fetch(`${API}/blogs-categories-tags`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)   \r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(error => console.log(error));\r\n};\r\n\r\nexport const createJournal = (journal, token) => {\r\n\r\n    let endPoint \r\n\r\n    if(isLoggedIn() && isLoggedIn().role === \"admin\"){\r\n        endPoint = `${API}/journal`\r\n    } else if (isLoggedIn() && isLoggedIn().role === \"member\"){\r\n        endPoint = `${API}/member/journal`\r\n    }\r\n\r\n    return fetch(`${endPoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: journal\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(error => console.log(error));\r\n};\r\n\r\n\r\n\r\n\r\nexport const readJournal = slug => {\r\n    return fetch(`${API}/journal/${slug}`,{\r\n        method: 'GET'\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(error=>console.log(error))\r\n}\r\n\r\nexport const listRelatedJournal = (journal) => {\r\n    //skip and limit are sent from client side\r\n\r\n    return fetch(`${API}/journals/relatedJournal`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(journal)   \r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(error => console.log(error));\r\n};\r\n\r\nexport const deleteJournal = (slug,token) => {\r\n\r\n    let endPoint\r\n\r\n    if(isLoggedIn() && isLoggedIn().role === \"admin\"){\r\n        endPoint = `${API}/journal/${slug}`\r\n    } else if (isLoggedIn() && isLoggedIn().role === \"member\") {\r\n        endPoint = `${API}/member/journal/${slug}`\r\n    }\r\n    \r\n    return fetch(endPoint,{\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}` \r\n        }\r\n    })\r\n    .then(response=>{\r\n        return response.json()\r\n    })\r\n    .catch(error => console.log(error))\r\n}\r\n\r\nexport const updateJournal = (journal,token,slug) => {\r\n\r\n    let endPoint\r\n\r\n    if(isLoggedIn() && isLoggedIn().role === \"admin\"){\r\n        endPoint = `${API}/journal/${slug}`\r\n    } else if (isLoggedIn() && isLoggedIn().role === \"member\") {\r\n        endPoint = `${API}/member/journal/${slug}`\r\n    }\r\n\r\n    return fetch(`${API}/journal/${slug}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: journal\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(error => console.log(error));\r\n};\r\n\r\n//send params from frontend\r\nexport const listSearch = (params) => {\r\n    console.log('search params',params) //assumption: params is an object\r\n    let query = queryString.stringify(params)   \r\n    console.log('query params',query)   //query = object stringified \r\n\r\n    return fetch(`${API}/journals/search?${query}`,{\r\n        method: 'GET'\r\n    })\r\n    .then(response => {\r\n        return response.json()\r\n    })\r\n    .catch(error=> console.log(error))\r\n}\r\n\r\nexport const listJournalForManage = (username) => {\r\n\r\n   /* `${API}/${username}/journals`*/\r\n\r\n    return fetch(`${API}/journals`,{\r\n        method: 'GET'\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(error=>console.log(error))\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}